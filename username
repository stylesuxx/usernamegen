#!/usr/bin/python
import argparse
import generator


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('path', type=str, metavar='WORDLIST',
                        help='File to use as basis for generating the words')
    parser.add_argument('-p', type=int, dest='prev_num', default=3,
                        help='Number of previous letters to base chain on')
    parser.add_argument('-n', type=int, dest='n', default=5,
                        help='Amount of generated words')
    parser.add_argument('-m', type=int, dest='min', default=8,
                        help='Minimum word length')
    args = parser.parse_args()

    formatters = [
        {'format': generator.Formatter.Join().format, 'weight': 2},
        {'format': generator.Formatter.Underscore().format, 'weight': 2},
        {'format': generator.Formatter.Capitalize().format, 'weight': 2},
        {'format': generator.Formatter.CapitalizeExceptFirst().format,
         'weight': 2},
        {'format': generator.Formatter.AppendNumber().format, 'weight': 1},
        {'format': generator.Formatter.CapitalizeAppendNumber().format,
         'weight': 1}
    ]

    file = open(args.path)
    file.seek(0)
    data = file.read()
    words = data.split("\n")
    file.close()

    gen = generator.Generator(words, args.prev_num, args.min)
    gen.setFormatters(formatters)
    for i in range(0, args.n):
        print gen.getString()

if __name__ == '__main__':
    main()
